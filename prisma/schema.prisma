generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  name              String
  password          String?
  role              UserRole        @default(CONSULTANT)
  pipedriveApiKey   String?
  pipedriveUserId   Int?            // Pipedrive user ID for owner assignment
  lastSyncTimestamp DateTime?
  syncStatus        String          @default("NOT_SYNCED")
  
  // User preferences
  quickActionMode   QuickActionMode @default(SIMPLE)
  emailNotifications Boolean        @default(true)
  activityReminders  Boolean        @default(true)
  campaignUpdates    Boolean        @default(true)
  syncStatusAlerts   Boolean        @default(true)
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  activities        Activity[]
  contacts          Contact[]
  pipedriveSyncs    PipedriveSync[]
  syncHistory       SyncHistory[]
  campaigns         Campaign[]      @relation("CampaignUsers")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Campaign {
  id          String         @id @default(cuid())
  name        String
  shortcode   String?        @unique
  description String?
  status      CampaignStatus @default(PLANNED)
  sector      String?
  theme       String?
  startDate   DateTime?
  endDate     DateTime?
  targetLeads Int?
  budget      Float?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  activities  Activity[]
  contacts    Contact[]      @relation("CampaignContacts")
  users       User[]         @relation("CampaignUsers")

  @@map("campaigns")
}

model Organization {
  id                  String   @id @default(cuid())
  name                String
  normalizedName      String
  pipedriveOrgId      String?  @unique
  lastPipedriveUpdate DateTime? // Last update timestamp
  updateSyncStatus    String    @default("SYNCED") // SYNCED, PENDING, FAILED
  industry            String?
  size                String?
  website             String?
  address             String?
  country             String?
  city                String?
  contactCount        Int      @default(0)
  lastActivity        DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  contacts            Contact[]

  @@map("organizations")
}

model Contact {
  id                   String        @id @default(cuid())
  name                 String
  email                String?
  phone                String?
  organisation         String?       // Keep for backward compatibility
  organizationId       String?       // New field for Organization relationship
  warmnessScore        Int           @default(0)
  lastContacted        DateTime?
  addedToCampaign      Boolean       @default(false)
  pipedrivePersonId    String?
  pipedriveOrgId       String?
  lastPipedriveUpdate  DateTime?
  updateSyncStatus     String        @default("SYNCED") // SYNCED, PENDING, FAILED
  
  // New Pipedrive fields from initial API response
  lastActivityDate     DateTime?     // last_activity_date from Pipedrive
  openDealsCount       Int           @default(0)
  closedDealsCount     Int           @default(0)
  wonDealsCount        Int           @default(0)
  lostDealsCount       Int           @default(0)
  activitiesCount      Int           @default(0)
  emailMessagesCount   Int           @default(0)
  lastIncomingMailTime DateTime?
  lastOutgoingMailTime DateTime?
  followersCount       Int           @default(0)
  jobTitle             String?
  
  // Deactivation fields
  isActive             Boolean       @default(true)
  deactivatedAt        DateTime?
  deactivatedBy        String?
  deactivationReason   String?
  
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  userId               String
  activities           Activity[]
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns            Campaign[]    @relation("CampaignContacts")
  organization         Organization? @relation(fields: [organizationId], references: [id])

  @@map("contacts")
}

model Activity {
  id                       String       @id @default(cuid())
  type                     ActivityType
  subject                  String?
  note                     String?
  dueDate                  DateTime?
  pipedriveActivityId      Int?         // Pipedrive activity ID
  replicatedToPipedrive    Boolean      @default(false) // Sync status
  pipedriveSyncAttempts    Int          @default(0) // Retry counter
  lastPipedriveSyncAttempt DateTime?    // Last attempt timestamp
  lastPipedriveUpdate      DateTime?    // Last update timestamp
  updateSyncStatus         String       @default("SYNCED") // SYNCED, PENDING, FAILED
  
  // System activity fields for audit trail
  isSystemActivity         Boolean      @default(false)
  systemAction             String?
  
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  userId                   String
  contactId                String?
  campaignId               String?
  campaign                 Campaign?    @relation(fields: [campaignId], references: [id])
  contact                  Contact?     @relation(fields: [contactId], references: [id])
  user                     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model PipedriveSync {
  id         String     @id @default(cuid())
  entityType String
  entityId   String
  userId     String
  status     SyncStatus @default(PENDING)
  error      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pipedrive_syncs")
}

model SyncHistory {
  id                String   @id @default(cuid())
  userId            String
  syncType          String
  totalContacts     Int      @default(0)  // Total contacts to be processed
  contactsProcessed Int      @default(0)
  contactsUpdated   Int      @default(0)
  contactsCreated   Int      @default(0)
  contactsFailed    Int      @default(0)
  startTime         DateTime
  endTime           DateTime?
  duration          Int?
  status            String   @default("PENDING")
  error             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sync_history")
}

enum UserRole {
  CONSULTANT
  GOLDEN_TICKET
}

enum CampaignStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
}

enum ActivityType {
  CALL
  EMAIL
  MEETING
  MEETING_REQUEST
  LINKEDIN
  REFERRAL
  CONFERENCE
}

enum SyncStatus {
  PENDING
  SUCCESS
  FAILED
  RETRY
}

enum QuickActionMode {
  SIMPLE
  DETAILED
}
